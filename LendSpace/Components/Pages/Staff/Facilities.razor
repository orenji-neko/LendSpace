@page "/Staff/Facility"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "StaffOnly")]

@using LendSpace.Models
@using LendSpace.Models.Enums
@using Microsoft.EntityFrameworkCore
@using Blazored.Toast.Services
@inject ApplicationDbContext Context
@inject FileManager FileManager
@inject DialogManager DialogManager
@inject IToastService ToastService

<PageTitle>Facilities</PageTitle>
<style>
	body {
		background-color: whitesmoke;
	}

	html {
		scroll-behavior: smooth;
		overflow-y: scroll;
		overflow-x: hidden;
		font-family: 'PT Sans Narrow', sans-serif;
	}

		html::-webkit-scrollbar {
			width: 8px;
		}

		html::-webkit-scrollbar-track {
			background: #f0f0f0;
		}

		html::-webkit-scrollbar-thumb {
			background-color: #888;
			border-radius: 4px;
			border: 2px solid #f0f0f0;
		}

			html::-webkit-scrollbar-thumb:hover {
				background-color: #555;
			}
</style>

<div class="text-center">
	<h2 class="text-3xl font-bold mb-2">Facilities Management</h2>
	<p class="text-gray-600">Manage your facilities and monitor user reviews</p>
	<div class="h-1 w-20 bg-green-500 mx-auto mt-4"></div>
</div>
<div class="min-h-screen w-full px-8">

	<header class="px-20">
		<div class="w-full mx-auto items-center flex justify-between">
			<div class="items-center flex">
				<h1 class="text-lg text-gray-800 mr-3">Search</h1>
				<div class="relative">
					<input type="text"
						   class="w-full pl-12 pr-4 py-3 border border-gray-300 shadow-sm"
						   placeholder="Search facilities by name or description..."
						   @oninput="@(e => SearchFacilities(e.Value?.ToString()))" />
					<svg class="absolute left-3 top-3.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
					</svg>
				</div>
			</div>
			<button class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded" @onclick="AddFacility">
				Add Facility
			</button>
		</div>
		<div class="border-b-3 border-gray-300 mt-3 w-full"></div>
	</header>

	<!-- Facilities Grid -->
	<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 mt-5 gap-6 px-6 items-center">
		@foreach (var facility in filteredFacilities!)
		{
			<div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
				<!-- Facility Card Content -->
				<div class="flex flex-col">
					<div class="relative h-48 overflow-hidden">
						<img src="@Assets["uploads/" + facility.ImagePath]"
							 alt="@facility.Name"
							 class="w-full h-full object-cover" />
						<div class="absolute top-2 right-2">
							<span class="@(facility.Available ? "bg-emerald-100 text-emerald-800" : "bg-red-100 text-red-800") text-xs font-semibold px-2.5 py-0.5 rounded-full">
								@(facility.Available ? "Available" : "Unavailable")
							</span>
						</div>
						<div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4">
							<h3 class="text-lg font-semibold text-white">@facility.Name</h3>
						</div>
					</div>
					<div class="p-4">
						<div class="flex items-center text-sm text-gray-500 mb-2">
							<i class="fas fa-map-marker-alt mr-1.5 text-xs"></i>
							<span class="truncate">@facility.Address</span>
						</div>
						<div class="flex items-center text-sm mb-2">
							@{
								var avgRating = GetAverageRating(facility.Id);
								var reviewCount = Context.Reviews.Count(r => r.FacilityId == facility.Id);
							}
							<div class="flex text-yellow-500">
								@for (int i = 1; i <= 5; i++)
								{
									if (i <= Math.Floor(avgRating))
									{
										<span class="text-yellow-500">★</span>
									}
									else if (i - Math.Floor(avgRating) < 1 && i - Math.Floor(avgRating) > 0)
									{
										<!-- Use a partially filled star effect -->
										<span class="text-gray-300 relative">
											★
											<span class="absolute inset-0 overflow-hidden text-yellow-500" style="width: @(Math.Round((avgRating - Math.Floor(avgRating)) * 100))%">★</span>
										</span>
									}
									else
									{
										<span class="text-gray-300">★</span>
									}
								}
							</div>
							<span class="ml-1 text-gray-600">@avgRating.ToString("0.0") (@reviewCount)</span>
						</div>
						<p class="text-gray-700 text-sm line-clamp-2 mb-3">@facility.Description</p>

						<div class="flex items-center justify-between mt-2">
							<span class="font-bold text-green-600">$@facility.Pricing<span class="text-sm font-normal text-gray-500">/night</span></span>
							<!-- Action Buttons -->
							<div class="flex space-x-2">
								<button @onclick="() => ViewFacility(facility)" class="bg-blue-500 hover:bg-blue-600 text-white py-1 px-3 rounded-md text-sm font-medium transition-colors">
									View
								</button>
								<button @onclick="() => EditFacility(facility.Id!)" class="bg-green-500 hover:bg-green-600 text-white py-1 px-3 rounded-md text-sm font-medium transition-colors">
									Edit
								</button>
								<button @onclick="() => DeleteFacility(facility.Id!)" class="bg-red-500 hover:bg-red-600 text-white py-1 px-3 rounded-md text-sm font-medium transition-colors">
									Delete
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		}
	</div>
</div>

<!-- Facility Details Modal -->
@if (showFacilityModal && selectedFacility != null)
{
	<div class="fixed inset-0 bg-gray-500/50 flex items-center justify-center z-40 p-4"
		 @onclick="CloseFacilityModal">
		<div class="bg-white rounded-lg shadow-xl p-0 w-full max-w-3xl mx-auto overflow-hidden max-h-[90vh] flex flex-col"
			 @onclick:stopPropagation="true">
			<!-- Modal Header with close button -->
			<div class="relative">

				<img src="@Assets["uploads/" + selectedFacility.ImagePath]"
					 alt="@selectedFacility.Name"
					 class="w-full h-48 sm:h-64 object-cover" />
				<button @onclick="CloseFacilityModal" class="absolute top-4 right-4 text-white p-2 rounded-full hover:bg-opacity-70">
					<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
				<div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4 sm:p-6">
					<h2 class="text-xl sm:text-2xl font-bold text-white">@selectedFacility.Name</h2>
					<div class="flex items-center text-white/80 mt-1">
						<i class="fas fa-map-marker-alt mr-1.5"></i>
						<span>@selectedFacility.Address</span>
					</div>
				</div>
			</div>

			<!-- Modal Content -->
			<div class="p-4 sm:p-6 overflow-y-auto flex-1">
				<div class="mb-4 sm:mb-6">
					<h3 class="text-lg font-semibold mb-2">About this facility</h3>
					<p class="text-gray-600">
						@selectedFacility.Description
					</p>
				</div>

				<div class="flex justify-between items-center border-t border-gray-200 pt-4 mt-4">
					<div>
						<p class="text-xl sm:text-2xl font-bold">$@selectedFacility.Pricing <span class="text-gray-500 text-sm font-normal">/night</span></p>
						<p class="text-sm text-gray-500">+ taxes and fees</p>
					</div>

					<div class="flex space-x-2">
						<button @onclick="() => EditFacility(selectedFacility.Id!)" class="bg-green-600 hover:bg-green-700 text-white py-2 sm:py-3 px-4 sm:px-6 rounded-md font-medium">
							Edit Facility
						</button>
					</div>
				</div>
				<div class="border-t border-gray-200 pt-4 mt-4">
					<div class="flex justify-between items-center mb-4">
						<h3 class="text-lg font-semibold">Reviews</h3>
						<div class="flex items-center">
							<div class="flex items-center mr-2">
								@{
									var avgRating = GetAverageRating(selectedFacility.Id);
								}
								<span class="text-yellow-500 flex">
									@for (int i = 1; i <= 5; i++)
									{
										if (i <= Math.Floor(avgRating))
										{
											<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
												<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
											</svg>
										}
										else if (i - Math.Floor(avgRating) < 1 && i - Math.Floor(avgRating) > 0)
										{
											<!-- Half star -->
											<div class="relative">
												<svg class="w-5 h-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
													<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
												</svg>
												<div class="absolute inset-0 overflow-hidden" style="width: @(Math.Round((avgRating - Math.Floor(avgRating)) * 100))%">
													<svg class="w-5 h-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
														<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
													</svg>
												</div>
											</div>
										}
										else
										{
											<svg class="w-5 h-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
												<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
											</svg>
										}
									}
								</span>
								<span class="ml-1 text-gray-700">@avgRating.ToString("0.0") (@facilityReviews.Count)</span>
							</div>
						</div>
					</div>

					<!-- Reviews List -->
					<div class="space-y-4 max-h-64 overflow-y-auto">
						@if (facilityReviews.Count == 0)
						{
							<p class="text-gray-500 italic">No reviews yet for this facility.</p>
						}
						else
						{
							@foreach (var review in facilityReviews)
							{
								<div class="border-b border-gray-100 pb-4 last:border-0 last:pb-0">
									<div class="flex justify-between">
										<div class="flex items-center">
											<div class="font-medium">@review.User.Name</div>
											<div class="text-gray-500 text-sm ml-2">
												@review.CreatedAt.ToString("MMM dd, yyyy")
												@if (review.UpdatedAt.HasValue)
												{
													<span class="italic">(edited)</span>
												}
											</div>
										</div>
										<div class="flex space-x-2">
											<button @onclick="() => DeleteReview(review.Id)" class="text-red-600 hover:text-red-800 text-sm">
												Delete
											</button>
										</div>
									</div>
									<div class="flex text-yellow-500 mt-1">
										@for (int i = 1; i <= 5; i++)
										{
											<span class="@(review.Rating >= i ? "text-yellow-500" : "text-gray-300")">★</span>
										}
									</div>
									<p class="text-gray-700 mt-1">@review.Comment</p>
								</div>
							}
						}
					</div>
				</div>
			</div>
		</div>
	</div>
}

<!-- Facility Add/Edit Modal -->
<Modal Show="showModal">
	<div class="p-6 w-full max-w-2xl">
		<div class="flex justify-between items-center mb-6">
			<h2 class="text-2xl font-bold">@(!edit ? "Add Facility" : "Edit Facility")</h2>
			<button @onclick="Close" class="text-gray-500 hover:text-gray-700">
				<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
				</svg>
			</button>
		</div>

		<EditForm Model="model" OnValidSubmit="Confirm" class="space-y-4">
			<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
				<div class="md:col-span-2">
					<label class="block text-sm font-medium text-gray-700 mb-1">Facility Image</label>
					<div class="mt-1 flex items-center">
						<InputFile OnChange="LoadImages" class="block w-full text-sm text-gray-500
						  file:mr-4 file:py-2 file:px-4
						  file:rounded-md file:border-0
						  file:text-sm file:font-semibold
						  file:bg-green-50 file:text-green-700
						  hover:file:bg-green-100" />
					</div>
					<p class="mt-1 text-xs text-gray-500">Upload a high-quality image for the facility.</p>
				</div>

				<div>
					<label class="block text-sm font-medium text-gray-700 mb-1">Name</label>
					<InputText @bind-Value="model!.Name" class="w-full border rounded-md px-3 py-2 focus:ring-green-500 focus:border-green-500" />
					<ValidationMessage For="() => model.Name" class="text-red-500 text-xs mt-1" />
				</div>

				<div>
					<label class="block text-sm font-medium text-gray-700 mb-1">Pricing ($ per night)</label>
					<InputNumber @bind-Value="model!.Pricing" class="w-full border rounded-md px-3 py-2 focus:ring-green-500 focus:border-green-500" />
					<ValidationMessage For="() => model.Pricing" class="text-red-500 text-xs mt-1" />
				</div>

				<div class="md:col-span-2">
					<label class="block text-sm font-medium text-gray-700 mb-1">Address</label>
					<InputText @bind-Value="model!.Address" class="w-full border rounded-md px-3 py-2 focus:ring-green-500 focus:border-green-500" />
					<ValidationMessage For="() => model.Address" class="text-red-500 text-xs mt-1" />
				</div>

				<div class="md:col-span-2">
					<label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
					<InputTextArea @bind-Value="model!.Description" rows="4" class="w-full border rounded-md px-3 py-2 focus:ring-green-500 focus:border-green-500" />
					<ValidationMessage For="() => model.Description" class="text-red-500 text-xs mt-1" />
				</div>

				<div class="md:col-span-2">
					<div class="flex items-center">
						<InputCheckbox @bind-Value="model!.Available" id="available" class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded" />
						<label for="available" class="ml-2 block text-sm text-gray-700">Facility Available for Booking</label>
					</div>
				</div>
			</div>

			<div class="pt-4 flex justify-end space-x-3 border-t border-gray-200 mt-6">
				<button type="button" class="bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded-md transition-colors" @onclick="Close">
					Cancel
				</button>
				<button type="submit" class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition-colors">
					@(edit ? "Save Changes" : "Create Facility")
				</button>
			</div>
		</EditForm>
	</div>
</Modal>

@code {
	private FacilityModel[]? facilities;
	private IEnumerable<FacilityModel> filteredFacilities;

	private FacilityModel? model { get; set; }
	private FacilityModel? selectedFacility;
	private List<IBrowserFile> images = new List<IBrowserFile>();
	private List<ReviewModel> facilityReviews = new List<ReviewModel>();
	private bool edit = false;
	private bool showModal = false;
	private bool showFacilityModal = false;
	private string searchTerm = string.Empty;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		FetchData();
		model = new FacilityModel();
	}

	private void FetchData()
	{
		facilities = Context.Facility.ToArray();
		filteredFacilities = facilities;
	}

	private void SearchFacilities(string value)
	{
		searchTerm = value ?? string.Empty;
		ApplyFilters();
	}

	private void ApplyFilters()
	{
		if (facilities == null)
			return;

		filteredFacilities = facilities
			.Where(f => string.IsNullOrEmpty(searchTerm) ||
						f.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
						f.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
						f.Address.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
			.ToList();
	}

	private double GetAverageRating(string facilityId)
	{
		var reviews = Context.Reviews.Where(r => r.FacilityId == facilityId).ToList();
		if (reviews.Count == 0) return 0;
		return Math.Round(reviews.Average(r => r.Rating), 1);
	}

	private void LoadReviews(string facilityId)
	{
		facilityReviews = Context.Reviews
			.Where(r => r.FacilityId == facilityId)
			.Include(r => r.User)
			.OrderByDescending(r => r.CreatedAt)
			.ToList();
	}

	private async Task DeleteReview(string reviewId)
	{
		var confirmed = await DialogManager.ShowDialogAsync("Delete Review", "Are you sure you want to delete this review?");
		if (!confirmed)
			return;

		var review = Context.Reviews.FirstOrDefault(r => r.Id == reviewId);
		if (review != null)
		{
			Context.Reviews.Remove(review);
			await Context.SaveChangesAsync();
			LoadReviews(selectedFacility.Id);
			ToastService.ShowSuccess("Review deleted successfully!");
		}
	}

	private void ViewFacility(FacilityModel facility)
	{
		selectedFacility = facility;
		showFacilityModal = true;
		LoadReviews(facility.Id);
	}

	private void CloseFacilityModal()
	{
		showFacilityModal = false;
	}

	private void AddFacility()
	{
		edit = false;
		model = new FacilityModel
			{
				Id = Guid.NewGuid().ToString(),
				Name = string.Empty,
				Pricing = 0,
				Address = "",
				Available = true,
				Description = string.Empty
			};
		showModal = true;
		images.Clear(); // Clear any previously selected images
	}

	private void EditFacility(string id)
	{
		edit = true;
		model = Context.Facility.Find(id);
		if (model == null)
		{
			return;
		}

		showModal = true;
		images.Clear(); // Clear any previously selected images
	}

	private async Task DeleteFacility(string id)
	{
		var confirmed = await DialogManager.ShowDialogAsync("Confirm Delete", "Are you sure you want to delete this facility? This action cannot be undone.");
		if (!confirmed)
		{
			return;
		}

		var temp = await Context.Facility.FindAsync(id);
		if (temp != null)
		{
			Context.Facility.Remove(temp);
			await Context.SaveChangesAsync();
			FetchData();
			ToastService.ShowSuccess("Facility deleted successfully!");
		}
	}

	private void Close()
	{
		edit = false;
		showModal = false;
		images.Clear(); // Clear selected images when closing the modal
	}

	private async Task Confirm()
	{
		if (model == null)
			return;

		if (edit)
		{
			var confirmed = await DialogManager.ShowDialogAsync("Confirm Edit", "Save changes to this facility?");
			if (!confirmed)
			{
				return;
			}

			if (images.Any())
			{
				var paths = await FileManager.UploadFiles(images);
				model.ImagePath = images.First().Name; // Add this line to update the ImagePath when editing
			}

			Context.Facility.Update(model);
			await Context.SaveChangesAsync();
			ToastService.ShowSuccess("Facility updated successfully!");
		}
		else
		{
			var confirmed = await DialogManager.ShowDialogAsync("Confirm Add", "Create this new facility?");
			if (!confirmed)
			{
				return;
			}

			if (images.Any())
			{
				await FileManager.UploadFiles(images);
				model.ImagePath = images.First().Name;
			}
			else
			{
				// Set a default image if none provided
				model.ImagePath = "default-facility.jpg";
			}

			Context.Facility.Add(model);
			await Context.SaveChangesAsync();
			ToastService.ShowSuccess("Facility created successfully!");
		}

		FetchData();
		showModal = false;
		images.Clear(); // Clear images after processing
	}

	private void LoadImages(InputFileChangeEventArgs e)
	{
		images.Clear(); // Clear previous selections
		foreach (var file in e.GetMultipleFiles())
		{
			images.Add(file);
		}
	}
}