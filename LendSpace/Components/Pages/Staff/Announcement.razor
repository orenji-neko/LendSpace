@page "/Staff/Announcement"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "StaffOnly")]

@using LendSpace.Models
@using Microsoft.EntityFrameworkCore
@using Blazored.Toast.Services
@inject ApplicationDbContext Context
@inject DialogManager DialogManager
@inject IToastService ToastService

<PageTitle>Announcements Management</PageTitle>
<style>
	body {
		background-color: whitesmoke;
	}

	html {
		scroll-behavior: smooth;
		overflow-y: scroll;
		overflow-x: hidden;
		font-family: 'PT Sans Narrow', sans-serif;
	}

		html::-webkit-scrollbar {
			width: 8px;
		}

		html::-webkit-scrollbar-track {
			background: #f0f0f0;
		}

		html::-webkit-scrollbar-thumb {
			background-color: #888;
			border-radius: 4px;
			border: 2px solid #f0f0f0;
		}

			html::-webkit-scrollbar-thumb:hover {
				background-color: #555;
			}
</style>

<div class="text-center">
	<h2 class="text-3xl font-bold mb-2">Announcements Management</h2>
	<p class="text-gray-600">Create and manage community announcements</p>
	<div class="h-1 w-20 bg-green-500 mx-auto mt-4"></div>
</div>

<div class="min-h-screen w-full px-8">
	<header class="px-20">
		<div class="w-full mx-auto items-center flex justify-between">
			<div class="items-center flex">
				<h1 class="text-lg text-gray-800 mr-3">Search</h1>
				<div class="relative">
					<input type="text"
						   class="w-full pl-12 pr-4 py-3 border border-gray-300 shadow-sm"
						   placeholder="Search announcements by heading or body..."
						   @oninput="@(e => SearchAnnouncements(e.Value?.ToString()))" />
					<svg class="absolute left-3 top-3.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
					</svg>
				</div>
			</div>
			<button class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded" @onclick="OpenAdd">
				Add Announcement
			</button>
		</div>
		<div class="border-b-3 border-gray-300 mt-3 w-full"></div>
	</header>

	<!-- Announcements List -->
	@if (filteredAnnouncements != null && filteredAnnouncements.Any())
	{
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
			@foreach (var announcement in filteredAnnouncements.OrderByDescending(a => a.PostedAt))
			{
				<div class="bg-white shadow rounded-lg overflow-hidden mb-6 hover:shadow-md transition-shadow">
					<div class="p-4">
						<!-- Header: Announcement Title -->
						<div class="flex justify-between items-center mb-4">
							<div>
								<h2 class="text-xl font-bold text-gray-800">@announcement.Heading</h2>
							</div>
							<span class="px-3 py-1 text-xs font-bold text-blue-800 bg-blue-100 rounded-full">
								@announcement.PostedAt.ToString("MMM d, yyyy")
							</span>
						</div>

						<!-- Body Preview Section -->
						<div class="mb-4">
							<p class="text-gray-700 line-clamp-3">
								@announcement.Body
							</p>
						</div>

						<!-- Action Buttons -->
						<div class="border-t border-gray-100 pt-3 mt-2 flex flex-row gap-4">
							<button class="text-blue-600 text-sm font-medium hover:text-blue-800"
									@onclick="() => OpenView(announcement)">
								View
							</button>
							<button class="text-emerald-600 text-sm font-medium hover:text-emerald-800"
									@onclick="() => OpenEdit(announcement)">
								Edit
							</button>
							<button class="text-red-600 text-sm font-medium hover:text-red-800"
									@onclick="() => Delete(announcement)">
								Delete
							</button>
						</div>
					</div>
				</div>
			}
		</div>
	}
	else
	{
		<div class="text-center py-16">
			<p class="text-gray-600">No announcements found.</p>
			<button class="mt-4 bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded" @onclick="OpenAdd">
				Create First Announcement
			</button>
		</div>
	}
</div>

<!-- Announcement View Modal -->
@if (viewingAnnouncement != null)
{
	<div class="fixed inset-0 bg-gray-500/50 flex items-center justify-center z-40 p-4"
		 @onclick="CloseView">
		<div class="bg-white rounded-lg shadow-xl p-0 w-full max-w-2xl mx-auto overflow-hidden max-h-[90vh] flex flex-col"
			 @onclick:stopPropagation="true">
			<div class="p-6 border-b border-gray-200">
				<div class="flex justify-between items-center">
					<h2 class="text-2xl font-bold text-gray-800">@viewingAnnouncement.Heading</h2>
					<button @onclick="CloseView" class="text-gray-500 hover:text-gray-700">
						<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				</div>
			</div>

			<div class="p-6 overflow-y-auto">
				<div class="flex justify-between items-center mb-4">
					<div class="flex items-center">
						<span class="px-3 py-1 text-xs font-bold text-blue-800 bg-blue-100 rounded-full">
							Posted on @viewingAnnouncement.PostedAt.ToString("MMMM d, yyyy")
						</span>
					</div>
				</div>

				<div class="mb-6">
					<h3 class="text-lg font-semibold mb-2">Announcement</h3>
					<div class="text-gray-700 whitespace-pre-line">@viewingAnnouncement.Body</div>
				</div>

				<!-- Posted information -->
				<div class="mb-6">
					<div class="flex items-center">
						<svg class="w-5 h-5 text-gray-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
								  d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
						</svg>
						<span class="text-gray-700">Posted on @viewingAnnouncement.PostedAt.ToString("MMMM d, yyyy")</span>
					</div>
				</div>

				<!-- Age Information -->
				@{
					var today = DateOnly.FromDateTime(DateTime.Now);
					var daysAgo = today.DayNumber - viewingAnnouncement.PostedAt.DayNumber;
					string ageMessage;

					if (daysAgo == 0)
					{
						ageMessage = "Posted today.";
					}
					else if (daysAgo == 1)
					{
						ageMessage = "Posted yesterday.";
					}
					else
					{
						ageMessage = $"Posted {daysAgo} days ago.";
					}
				}

				<div class="mb-6">
					<p class="text-gray-700">@ageMessage</p>
				</div>
			</div>

			<div class="p-4 border-t border-gray-200 bg-gray-50 flex justify-between">
				<button @onclick="() => OpenEdit(viewingAnnouncement)" class="bg-green-500 hover:bg-blue-600 text-white py-2 px-4 rounded-md transition-colors">
					Edit Announcement
				</button>
				<button @onclick="() => Delete(viewingAnnouncement)" class="bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-md transition-colors">
					Delete Announcement
				</button>
			</div>
		</div>
	</div>
}

@* Add/Edit Announcement Modal *@
<Modal Show="Show" OnClose="Close">
	<div class="p-6 w-full max-w-2xl">
		<div class="flex justify-between items-center mb-6">
			<h2 class="text-2xl font-bold">@(!Edit ? "Add Announcement" : "Edit Announcement")</h2>
			<button @onclick="Close" class="text-gray-500 hover:text-gray-700">
				<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
				</svg>
			</button>
		</div>

		<EditForm Model="model" OnValidSubmit="Confirm">
			<DataAnnotationsValidator />

			<div class="mb-4">
				<label class="block text-sm font-medium text-gray-700 mb-1">Heading</label>
				<InputText @bind-Value="model!.Heading" class="w-full border rounded-md px-3 py-2 focus:ring-green-500 focus:border-green-500" />
				<ValidationMessage For="() => model!.Heading" class="text-red-500 text-xs mt-1" />
			</div>
			<div class="mb-4">
				<label class="block text-sm font-medium text-gray-700 mb-1">Body</label>
				<InputTextArea @bind-Value="model!.Body" class="w-full border rounded-md px-3 py-2 focus:ring-green-500 focus:border-green-500" rows="6" />
				<ValidationMessage For="() => model!.Body" class="text-red-500 text-xs mt-1" />
			</div>
			<div class="mb-4">
				<label class="block text-sm font-medium text-gray-700 mb-1">Posted Date</label>
				<InputDate @bind-Value="model!.PostedAt" class="w-full border rounded-md px-3 py-2 focus:ring-green-500 focus:border-green-500" />
				<ValidationMessage For="() => model!.PostedAt" class="text-red-500 text-xs mt-1" />
			</div>

			<div class="pt-4 flex justify-end space-x-3 border-t border-gray-200 mt-6">
				<button type="button" class="bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded-md transition-colors" @onclick="Close">
					Cancel
				</button>
				<button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors">
					@(Edit ? "Save Changes" : "Publish Announcement")
				</button>
			</div>
		</EditForm>
	</div>
</Modal>

@code {
	private IEnumerable<AnnouncementModel>? announcements;
	private IEnumerable<AnnouncementModel>? filteredAnnouncements;
	private AnnouncementModel? model { get; set; }
	private AnnouncementModel? viewingAnnouncement { get; set; }
	private string searchTerm = string.Empty;
	public bool Show { get; set; }
	public bool Edit { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();
		FetchData();
		Clear();
	}

	private void Clear()
	{
		model = new AnnouncementModel
			{
				Id = Guid.NewGuid().ToString(),
				Heading = string.Empty,
				Body = string.Empty,
				PostedAt = DateOnly.FromDateTime(DateTime.Now)
			};
	}

	private void FetchData()
	{
		announcements = Context.Announcements.ToList();
		filteredAnnouncements = announcements;
	}

	private void SearchAnnouncements(string value)
	{
		searchTerm = value ?? string.Empty;
		ApplyFilters();
	}

	private void ApplyFilters()
	{
		if (announcements == null)
			return;

		filteredAnnouncements = announcements
			.Where(a => string.IsNullOrEmpty(searchTerm) ||
						a.Heading.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
						a.Body.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
			.ToList();
	}

	public async Task Delete(AnnouncementModel announcement)
	{
		if (!(await DialogManager.ShowDialogAsync("Confirm", "Are you sure you want to delete this announcement? This action cannot be undone.")))
		{
			return;
		}

		Context.Announcements.Remove(announcement);
		await Context.SaveChangesAsync();

		if (viewingAnnouncement == announcement)
		{
			CloseView();
		}

		FetchData();
		ToastService.ShowSuccess("Announcement deleted successfully!");
	}

	public void OpenAdd()
	{
		model = new AnnouncementModel
			{
				Id = Guid.NewGuid().ToString(),
				Heading = string.Empty,
				Body = string.Empty,
				PostedAt = DateOnly.FromDateTime(DateTime.Now)
			};

		Edit = false;
		Show = true;
	}

	public void OpenEdit(AnnouncementModel announcement)
	{
		model = announcement;

		Edit = true;
		Show = true;
	}

	public void OpenView(AnnouncementModel announcement)
	{
		viewingAnnouncement = announcement;
	}

	public void CloseView()
	{
		viewingAnnouncement = null;
	}

	public void Close()
	{
		Clear();

		Edit = false;
		Show = false;
	}

	public async Task Confirm()
	{
		if (Edit)
		{
			// edit
			if (!(await DialogManager.ShowDialogAsync("Confirm", "Save changes to this announcement?")))
			{
				return;
			}

			Context.Announcements.Update(model!);
			ToastService.ShowSuccess("Announcement updated successfully!");
		}
		else
		{
			// add
			if (!(await DialogManager.ShowDialogAsync("Confirm", "Publish this new announcement?")))
			{
				return;
			}

			model!.Id = Guid.NewGuid().ToString();
			Context.Announcements.Add(model!);
			ToastService.ShowSuccess("Announcement published successfully!");
		}

		await Context.SaveChangesAsync();
		FetchData();
		Close();
	}
}