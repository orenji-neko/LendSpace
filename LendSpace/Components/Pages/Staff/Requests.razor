@page "/Staff/Request"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "StaffOnly")]
@using Blazored.Toast.Services
@inject ApplicationDbContext Context
@inject DialogManager DialogManager
@inject IToastService ToastService

<PageTitle>Service Requests</PageTitle>
<style>
	body {
		background-color: whitesmoke;
	}

	html {
		scroll-behavior: smooth;
		overflow-y: scroll;
		overflow-x: hidden;
		font-family: 'PT Sans Narrow', sans-serif;
	}

		html::-webkit-scrollbar {
			width: 8px;
		}

		html::-webkit-scrollbar-track {
			background: #f0f0f0;
		}

		html::-webkit-scrollbar-thumb {
			background-color: #888;
			border-radius: 4px;
			border: 2px solid #f0f0f0;
		}

			html::-webkit-scrollbar-thumb:hover {
				background-color: #555;
			}
</style>
<div class="text-center">
	<h2 class="text-3xl font-bold mb-2">Service Requests</h2>
	<p class="text-gray-600">Manage incoming service requests</p>
	<div class="h-1 w-20 bg-green-500 mx-auto mt-4"></div>
</div>
<main class="w-full h-full p-4">
	<div class="max-w-7xl mx-auto px-4 py-8">
		<div class="">

			@* Facility Bookings List *@
			@if (requests != null && requests.Any())
			{
				@foreach (var request in requests)
				{
					<div class="bg-white shadow rounded-lg overflow-hidden mb-6 hover:shadow-md transition-shadow">
						<div class="p-4">
							<!-- Header: Reservation Title with Status -->
							<div class="flex justify-between items-center mb-4">
								<div>
									<h2 class="text-xl font-bold text-gray-800">@request.Title</h2>
								</div>
								<span class="@GetBadgeClasses(request.Status)">
									@if (request.Status == RequestStatus.Cancelled || request.Status == RequestStatus.Failed)
									{
										@(request.Status == RequestStatus.Cancelled ? "Cancelled" : "Failed")
									}
									else
									{
										@request.Status.ToString()
									}
								</span>
							</div>

							<!-- Description Section -->
							<div class="mb-4">
								<p class="text-gray-700">
									<span class="font-semibold">Description:</span>
									<span class="ml-1">@request.Description</span>
								</p>
							</div>

							<!-- Reservation Dates -->
							<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
								<!-- Start Date -->
								<div class="flex items-start gap-2">
									<svg class="w-5 h-5 text-gray-500 mt-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
											  d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
									</svg>
									<div>
										<p class="text-sm font-semibold text-gray-600">Start Date</p>
										<p class="text-gray-700">@request.StartsAt.ToString("d")</p>
									</div>
								</div>
								<!-- End Date -->
								<div class="flex items-start gap-2">
									<svg class="w-5 h-5 text-gray-500 mt-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
											  d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
									</svg>
									<div>
										<p class="text-sm font-semibold text-gray-600">End Date</p>
										<p class="text-gray-700">@request.EndsAt.ToString("d")</p>
									</div>
								</div>
							</div>

							<!-- Service Information -->
							@if (request.Service != null)
							{
								<div class="mb-4">
									<p class="text-gray-700">
										<span class="font-semibold">Service:</span>
										<span class="ml-1">@request.Service.Name</span>
									</p>
								</div>
							}

							<!-- User Information Section -->
							<div class="mt-4 border-t pt-4">
								<div class="flex items-center gap-2">
									<svg class="w-5 h-5 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M10 2C7.243 2 5 4.243 5 7s2.243 5 5 5 5-2.243 5-5S12.757 2 10 2zm-7 16a7 7 0 0114 0H3z" clip-rule="evenodd"></path>
									</svg>
									<p class="text-gray-700">
										<span class="font-semibold">Reserved by:</span>
										<span class="ml-1">@request.User!.LastName, @request.User!.FirstName</span>
									</p>
								</div>
							</div>
						</div>
						<div class="p-3 flex flex-row gap-4">
							@if (request.Status == RequestStatus.Pending)
							{
								<button @onclick="() => ApproveRequest(request)" class="text-emerald-600 text-sm font-medium hover:text-emerald-800 flex items-center">
									<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
									</svg>
									Approve
								</button>
								<button @onclick="() => RejectRequest(request)" class="text-red-600 text-sm font-medium hover:text-red-800 flex items-center">
									<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
									</svg>
									Reject
								</button>
							}
							<button @onclick="() => EditRequest(request)" class="text-blue-600 text-sm font-medium hover:text-blue-800 flex items-center">
								<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
								</svg>
								Edit
							</button>
							<button @onclick="() => DeleteRequest(request)" class="text-red-600 text-sm font-medium hover:text-red-800 flex items-center">
								<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
								</svg>
								Delete
							</button>
						</div>
					</div>
				}
			}
			else
			{
				<p class="text-gray-600">No requests found.</p>
			}
		</div>
	</div>
</main>

@code {
	private IEnumerable<RequestModel>? requests;

	private RequestModel? currentRequest { get; set; }
	private bool edit = false;
	private bool showModal = false;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		FetchData();
		currentRequest ??= new RequestModel();
	}

	private void FetchData()
	{
		requests = Context.Requests
			.Include(r => r.User)
			.Include(r => r.Service)
			.ToList();
	}

	private string GetBadgeClasses(RequestStatus status) =>
		status switch
		{
			RequestStatus.Pending =>
					"px-3 py-1 text-xs font-bold text-yellow-800 bg-yellow-100 rounded-full",
			RequestStatus.Approved =>
					"px-3 py-1 text-xs font-bold text-green-800 bg-green-100 rounded-full",
			RequestStatus.Completed =>
					"px-3 py-1 text-xs font-bold text-blue-800 bg-blue-100 rounded-full",
			RequestStatus.Failed =>
					"px-3 py-1 text-xs font-bold text-red-800 bg-red-100 rounded-full",
			RequestStatus.Cancelled =>
					"px-3 py-1 text-xs font-bold text-red-800 bg-red-100 rounded-full",
			_ => string.Empty
		};

	private async Task ApproveRequest(RequestModel request)
	{
		// Show confirmation dialog
		bool confirmed = await DialogManager.ShowDialogAsync(
			"Approve Request",
			$"Are you sure you want to approve the request '{request.Title}'?"
		);

		if (confirmed)
		{
			// Update request status to approved
			request.Status = RequestStatus.Approved;
			Context.Requests.Update(request);
			await Context.SaveChangesAsync();

			// Show success message
			ToastService.ShowSuccess("Request approved successfully!");

			// Refresh the data
			FetchData();
			StateHasChanged();
		}
	}

	private async Task RejectRequest(RequestModel request)
	{
		// Show confirmation dialog
		bool confirmed = await DialogManager.ShowDialogAsync(
			"Reject Request",
			$"Are you sure you want to reject the request '{request.Title}'?"
		);

		if (confirmed)
		{
			// Update request status to cancelled
			request.Status = RequestStatus.Cancelled;
			Context.Requests.Update(request);
			await Context.SaveChangesAsync();

			// Show success message
			ToastService.ShowWarning("Request rejected.");

			// Refresh the data
			FetchData();
			StateHasChanged();
		}
	}

	private void EditRequest(RequestModel request)
	{
		// Clone the request for editing
		currentRequest = request;
		edit = true;
		showModal = true;
		// You'd typically show a modal/dialog here for editing
	}

	private async Task DeleteRequest(RequestModel request)
	{
		// Show confirmation dialog
		bool confirmed = await DialogManager.ShowDialogAsync(
			"Delete Request",
			$"Are you sure you want to delete the request '{request.Title}'? This action cannot be undone."
		);

		if (confirmed)
		{
			// Remove the request
			Context.Requests.Remove(request);
			await Context.SaveChangesAsync();

			// Show success message
			ToastService.ShowSuccess("Request deleted successfully!");

			// Refresh the data
			FetchData();
			StateHasChanged();
		}
	}
}