@using Microsoft.AspNetCore.Components.Authorization
@inject ApplicationDbContext Context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UserManager<UserModel> UserManager
@inject IJSRuntime JSRuntime

<nav class="bg-white/95 backdrop-blur-sm h-20 p-2 py-5 flex items-center justify-between shadow-sm sticky top-0 w-full z-20 border-b border-gray-100">
    <!-- Logo Section -->
    <div class="flex items-center">
        <a href="/" class="flex items-center group">
            <img src="/image/logo.png" alt="LendSpace Logo" class="logo w-auto h-10 ml-8 hover:scale-105 transition-transform duration-300 ease-out">
        </a>
    </div>

    <!-- Desktop Navigation Links -->
    <ul class="hidden md:flex items-center justify-end mr-8 space-x-8">
        @if (IsAuthenticated)
        {
            if (IsAdmin)
            {
                <li class="group relative">
                    <NavLink href="/Admin" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                            <polyline points="9 22 9 12 15 12 15 22"></polyline>
                        </svg>
                        <span class="font-medium">Home</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="group relative">
                    <NavLink href="/Admin/Community" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                        </svg>
                        <span class="font-medium">Community</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="group relative">
                    <NavLink href="/Admin/Billing" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect>
                            <line x1="1" y1="10" x2="23" y2="10"></line>
                        </svg>
                        <span class="font-medium">Billing</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="group relative">
                    <NavLink href="/Admin/Service" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                            <circle cx="9" cy="7" r="4"></circle>
                            <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                            <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                        </svg>
                        <span class="font-medium">Services</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="group relative">
                    <NavLink href="/Admin/User" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                            <circle cx="9" cy="7" r="4"></circle>
                            <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                            <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                        </svg>
                        <span class="font-medium">Users</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
            }
            else if (IsStaff)
            {
                <li class="group relative">
                    <NavLink href="/Staff" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                            <polyline points="9 22 9 12 15 12 15 22"></polyline>
                        </svg>
                        <span class="font-medium">Home</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="group relative">
                    <NavLink href="/Staff/Announcement" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
                            <line x1="12" y1="9" x2="12" y2="13"></line>
                            <line x1="12" y1="17" x2="12.01" y2="17"></line>
                        </svg>
                        <span class="font-medium">Announcement</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="group relative">
                    <NavLink href="/Staff/Event" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                            <line x1="16" y1="2" x2="16" y2="6"></line>
                            <line x1="8" y1="2" x2="8" y2="6"></line>
                            <line x1="3" y1="10" x2="21" y2="10"></line>
                        </svg>
                        <span class="font-medium">Event</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="group relative">
                    <NavLink href="/Staff/Facility" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                            <path d="M14.05 2a9 9 0 0 1 8 7.94"></path>
                            <path d="M14.05 6A5 5 0 0 1 18 10"></path>
                        </svg>
                        <span class="font-medium">Facility</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="group relative">
                    <NavLink href="/Staff/Request" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <circle cx="12" cy="12" r="10"></circle>
                            <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path>
                            <line x1="12" y1="17" x2="12.01" y2="17"></line>
                        </svg>
                        <span class="font-medium">ServiceRequest</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="group relative">
                    <NavLink href="/Staff/Reservations" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                            <polyline points="14 2 14 8 20 8"></polyline>
                            <line x1="16" y1="13" x2="8" y2="13"></line>
                            <line x1="16" y1="17" x2="8" y2="17"></line>
                            <polyline points="10 9 9 9 8 9"></polyline>
                        </svg>
                        <span class="font-medium">Reservations</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
            }
            else
            {
                <li class="group relative">
                    <NavLink href="/User" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                            <polyline points="9 22 9 12 15 12 15 22"></polyline>
                        </svg>
                        <span class="font-medium">Home</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="group relative">
                    <NavLink href="/User/Community" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                            <circle cx="9" cy="7" r="4"></circle>
                            <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                            <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                        </svg>
                        <span class="font-medium">Community</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="group relative">
                    <NavLink href="/User/Facility" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                            <line x1="8" y1="21" x2="16" y2="21"></line>
                            <line x1="12" y1="17" x2="12" y2="21"></line>
                        </svg>
                        <span class="font-medium">Facilities</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="group relative">
                    <NavLink href="/User/Reservations" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                            <line x1="16" y1="2" x2="16" y2="6"></line>
                            <line x1="8" y1="2" x2="8" y2="6"></line>
                            <line x1="3" y1="10" x2="21" y2="10"></line>
                        </svg>
                        <span class="font-medium">Reservations</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="group relative">
                    <NavLink href="/User/Billing" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                            <rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect>
                            <line x1="1" y1="10" x2="23" y2="10"></line>
                        </svg>
                        <span class="font-medium">Billing</span>
                    </NavLink>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
                </li>
                <li class="relative group" @ref="notificationDropdownRef">
                    <div class="flex items-center">
                        <button @onclick="ToggleNotifications" class="relative flex items-center space-x-2 text-gray-600">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                                <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path>
                                <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
                            </svg>
                           
                            @if (unreadCount > 0)
                            {
                                <span class="absolute -top-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full bg-red-500 text-xs font-bold text-white">@(unreadCount > 99 ? "99+" : unreadCount)</span>
                            }
                        </button>
                       
                    </div>

                    @if (showNotifications)
                    {
                        <div class="absolute right-0 mt-2 w-80 bg-white shadow-lg rounded-md overflow-hidden border border-gray-100 z-30" @onclick:stopPropagation>
                            <div class="p-3 bg-gray-50 border-b border-gray-200 flex justify-between items-center">
                                <h3 class="font-semibold text-gray-700">Notifications</h3>
                                @if (unreadCount > 0)
                                {
                                    <button @onclick="MarkAllAsRead" class="text-sm text-emerald-600 hover:text-emerald-700">
                                        Mark all as read
                                    </button>
                                }
                            </div>
                            <div class="max-h-80 overflow-y-auto">
                                @if (notifications != null && notifications.Any())
                                {
                                    @foreach (var notification in notifications.Take(10))
                                    {
                                        <div class="p-3 border-b border-gray-100 @(notification.IsRead ? "" : "bg-blue-50") cursor-pointer" @onclick="() => ViewNotification(notification)" @onclick:stopPropagation>
                                            <div class="flex items-start">
                                                <div class="flex-shrink-0 mr-3">
                                                    @if (notification.Type == NotificationType.Success)
                                                    {
                                                        <div class="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-green-500">
                                                                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                                                <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                                            </svg>
                                                        </div>
                                                    }
                                                    else if (notification.Type == NotificationType.Info)
                                                    {
                                                        <div class="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-blue-500">
                                                                <circle cx="12" cy="12" r="10"></circle>
                                                                <line x1="12" y1="16" x2="12" y2="12"></line>
                                                                <line x1="12" y1="8" x2="12.01" y2="8"></line>
                                                            </svg>
                                                        </div>
                                                    }
                                                    else if (notification.Type == NotificationType.Warning)
                                                    {
                                                        <div class="h-8 w-8 rounded-full bg-yellow-100 flex items-center justify-center">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-yellow-500">
                                                                <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
                                                                <line x1="12" y1="9" x2="12" y2="13"></line>
                                                                <line x1="12" y1="17" x2="12.01" y2="17"></line>
                                                            </svg>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="h-8 w-8 rounded-full bg-red-100 flex items-center justify-center">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-red-500">
                                                                <circle cx="12" cy="12" r="10"></circle>
                                                                <line x1="15" y1="9" x2="9" y2="15"></line>
                                                                <line x1="9" y1="9" x2="15" y2="15"></line>
                                                            </svg>
                                                        </div>
                                                    }
                                                </div>
                                                <div class="flex-1">
                                                    <p class="text-sm font-medium text-gray-800">@notification.Title</p>
                                                    <p class="text-xs text-gray-600 line-clamp-2">@notification.Message</p>
                                                    <p class="text-xs text-gray-500 mt-1">@notification.CreatedAt.ToString("MMM dd, yyyy")</p>
                                                </div>
                                                @if (!notification.IsRead)
                                                {
                                                    <div class="ml-2 h-2 w-2 bg-blue-500 rounded-full"></div>
                                                }
                                            </div>
                                        </div>
                                    }
                                    @if (notifications.Count > 10)
                                    {
                                        <div class="p-2 text-center">
                                            <button @onclick="ViewAllNotifications" class="text-sm text-blue-600 hover:text-blue-800">
                                                View all (@notifications.Count)
                                            </button>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="p-4 text-center text-gray-500">
                                        <p>No notifications yet</p>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </li>
            }

            <li class="ml-4">
                <div class="relative">
                    <button type="button" class="flex items-center text-gray-600 hover:text-blue-600 transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-blue-400 rounded-full" @onclick="ToggleDropdown">
                        <!-- Profile Picture -->
                        @if (!string.IsNullOrEmpty(currentUser?.ProfilePictureUrl))
                        {
                            <img class="h-8 w-8 rounded-full mr-2" src="@currentUser.ProfilePictureUrl" alt="Profile picture" />
                        }
                        else
                        {
                            <div class="h-8 w-8 rounded-full mr-2 bg-gray-200 flex items-center justify-center">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                    <circle cx="12" cy="7" r="4"></circle>
                                </svg>
                            </div>
                        }
                        <span class="font-medium">@UserName</span>
                        <svg class="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </button>
                    @if (dropdownOpen)
                    {
                        <div class="absolute right-0 mt-2 w-40 bg-white shadow-lg rounded-md overflow-hidden border border-gray-100 z-20">
                            <NavLink href="/Shared/Profile" class="text-gray-700 hover:bg-gray-100 px-4 py-3 text-sm font-medium flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 mr-2">
                                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                    <circle cx="12" cy="7" r="4"></circle>
                                </svg>
                                Profile
                            </NavLink>
                            <button @onclick="Logout" class="w-full text-left text-gray-700 hover:bg-gray-100 px-4 py-3 text-sm font-medium flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 mr-2">
                                    <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                                    <polyline points="16 17 21 12 16 7"></polyline>
                                    <line x1="21" y1="12" x2="9" y2="12"></line>
                                </svg>
                                Logout
                            </button>
                        </div>
                    }
                </div>
            </li>
        }
        else
        {
            <li class="group relative">
                <NavLink href="/" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                        <polyline points="9 22 9 12 15 12 15 22"></polyline>
                    </svg>
                    <span class="font-medium">Home</span>
                </NavLink>
                <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
            </li>
            <li class="group relative">
                <a href="/spaces" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                        <circle cx="12" cy="10" r="3"></circle>
                    </svg>
                    <span class="font-medium">Spaces</span>
                </a>
                <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
            </li>
            <li class="group relative">
                <a href="/events" class="flex items-center space-x-2 text-gray-600 hover:text-emerald-600 transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                        <line x1="16" y1="2" x2="16" y2="6"></line>
                        <line x1="8" y1="2" x2="8" y2="6"></line>
                        <line x1="3" y1="10" x2="21" y2="10"></line>
                    </svg>
                    <span class="font-medium">Events</span>
                </a>
                <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-emerald-500 group-hover:w-4/5 transition-all duration-300 ease-out"></div>
            </li>
            <li class="ml-4">
                <NavLink href="/Login" class="bg-emerald-500 flex items-center border border-gray-200 rounded-full h-10 px-5 shadow-sm">
                    <img src="/image/user.png" alt="User Icon" class="w-auto h-5 invert">
                    <span class="text-white text-center text-sm font-medium ml-2">Login</span>
                </NavLink>
            </li>
        }
    </ul>

    <!-- Mobile Menu Button -->
    <div class="md:hidden mr-4">
        <button @onclick="ToggleMobileMenu" type="button" class="inline-flex items-center justify-center p-2 rounded-md text-gray-600 hover:text-emerald-600 focus:outline-none">
            <span class="sr-only">Open main menu</span>
            <!-- Hamburger Icon -->
            <svg class="h-6 w-6 @(mobileMenuOpen ? "hidden" : "block")"
                 xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
            <!-- Close Icon -->
            <svg class="h-6 w-6 @(mobileMenuOpen ? "block" : "hidden")"
                 xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>
    </div>
</nav>

<!-- Mobile Menu -->
<div id="mobile-menu" class="fixed top-20 left-0 w-full bg-white/95 backdrop-blur-sm shadow-md md:hidden @(mobileMenuOpen ? "block" : "hidden")" style="z-index: 40;">
    <div class="px-4 py-3 space-y-2">
        @if (IsAuthenticated)
        {
            @if (IsAdmin)
            {
                <NavLink href="/Admin" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                        <polyline points="9 22 9 12 15 12 15 22"></polyline>
                    </svg>
                    <span class="font-medium">Home</span>
                </NavLink>
                <NavLink href="/Admin/Community" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                    </svg>
                    <span class="font-medium">Community</span>
                </NavLink>
                <NavLink href="/Admin/Billing" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect>
                        <line x1="1" y1="10" x2="23" y2="10"></line>
                    </svg>
                    <span class="font-medium">Billing</span>
                </NavLink>
                <NavLink href="/Admin/Service" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect>
                        <line x1="1" y1="10" x2="23" y2="10"></line>
                    </svg>
                    <span class="font-medium">Services</span>
                </NavLink>
                <NavLink href="/Admin/User" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                        <circle cx="9" cy="7" r="4"></circle>
                        <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                    </svg>
                    <span class="font-medium">Manage Users</span>
                </NavLink>
            }
            else if (IsStaff)
            {
                <NavLink href="/Staff" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                        <polyline points="9 22 9 12 15 12 15 22"></polyline>
                    </svg>
                    <span class="font-medium">Home</span>
                </NavLink>
                <NavLink href="/Staff/Event" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                        <line x1="16" y1="2" x2="16" y2="6"></line>
                        <line x1="8" y1="2" x2="8" y2="6"></line>
                        <line x1="3" y1="10" x2="21" y2="10"></line>
                    </svg>
                    <span class="font-medium">Event</span>
                </NavLink>
                <NavLink href="/Staff/Facility" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                        <path d="M14.05 2a9 9 0 0 1 8 7.94"></path>
                        <path d="M14.05 6A5 5 0 0 1 18 10"></path>
                    </svg>
                    <span class="font-medium">Facility</span>
                </NavLink>
                <NavLink href="/Staff/Request" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                        <polyline points="14 2 14 8 20 8"></polyline>
                        <line x1="16" y1="13" x2="8" y2="13"></line>
                        <line x1="16" y1="17" x2="8" y2="17"></line>
                        <polyline points="10 9 9 9 8 9"></polyline>
                    </svg>
                    <span class="font-medium">Request</span>
                </NavLink>
            }
            else
            {
                <NavLink href="/User" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                        <polyline points="9 22 9 12 15 12 15 22"></polyline>
                    </svg>
                    <span class="font-medium">Home</span>
                </NavLink>
                <NavLink href="/User/Community" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                        <circle cx="9" cy="7" r="4"></circle>
                        <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                    </svg>
                    <span class="font-medium">Community</span>
                </NavLink>
                <NavLink href="/User/Facility" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                        <circle cx="12" cy="10" r="3"></circle>
                    </svg>
                    <span class="font-medium">Facilities</span>
                </NavLink>
                <NavLink href="/User/Billing" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                        <rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect>
                        <line x1="1" y1="10" x2="23" y2="10"></line>
                    </svg>
                    <span class="font-medium">Billing</span>
                </NavLink>
            }

            <hr class="my-2 border-gray-100" />
            <NavLink href="Shared/Profile" class="text-gray-700 hover:bg-gray-100 px-4 py-3 text-sm font-medium flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 mr-2">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                    <circle cx="12" cy="7" r="4"></circle>
                </svg>
                Profile
            </NavLink>
            <button @onclick="Logout" class="w-full flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                    <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                    <polyline points="16 17 21 12 16 7"></polyline>
                    <line x1="21" y1="12" x2="9" y2="12"></line>
                </svg>
                <span class="font-medium">Logout</span>
            </button>
        }
        else
        {
            <NavLink href="/" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                    <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                    <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
                <span class="font-medium">Home</span>
            </NavLink>
            <NavLink href="/spaces" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                    <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                    <circle cx="12" cy="10" r="3"></circle>
                </svg>
                <span class="font-medium">Spaces</span>
            </NavLink>
            <NavLink href="/events" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="16" y1="2" x2="16" y2="6"></line>
                    <line x1="8" y1="2" x2="8" y2="6"></line>
                    <line x1="3" y1="10" x2="21" y2="10"></line>
                </svg>
                <span class="font-medium">Events</span>
            </NavLink>
            <NavLink href="/Login" class="flex items-center space-x-3 py-3 px-4 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 stroke-current">
                    <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"></path>
                    <polyline points="10 17 15 12 10 7"></polyline>
                    <line x1="15" y1="12" x2="3" y2="12"></line>
                </svg>
                <span class="font-medium">Login</span>
            </NavLink>
        }
    </div>
</div>
<script>
        // Add this script to your _Host.cshtml or App.razor or as a separate JS file

    // Global storage for click outside handlers
    window.clickOutsideHandlers = new Map();

    window.addClickOutsideHandler = (dotnetRef, elementRef) => {
        // Generate unique ID for this handler
        const handlerId = Date.now().toString();

        // Store the handler function with reference to both .NET object and element
        const handler = (event) => {
            // Check if the clicked element is outside the target element
            if (elementRef && !elementRef.contains(event.target)) {
                dotnetRef.invokeMethodAsync('HandleClickOutside');
            }
        };

        // Store handler reference so we can remove it later
        window.clickOutsideHandlers.set(handlerId, handler);

        // Add the event listener
        document.addEventListener('mousedown', handler);

        // Return the handler ID so it can be used for removal
        return handlerId;
    };

    window.removeClickOutsideHandler = (elementRef) => {
        // For simplicity, we'll remove all handlers
        // In a more complex app, you might want to track specific handlers
        window.clickOutsideHandlers.forEach((handler) => {
            document.removeEventListener('mousedown', handler);
        });

        window.clickOutsideHandlers.clear();
    };
</script>

@implements IDisposable
@code {
    private bool IsAuthenticated;
    private bool IsAdmin;
    private bool IsStaff;
    private string UserName = "Guest";
    private bool dropdownOpen = false;
    private bool mobileMenuOpen = false;
    private UserModel? currentUser;
    private List<NotificationModel> notifications = new List<NotificationModel>();
    private bool showNotifications = false;
    private int unreadCount = 0;
    private string userId;
    private System.Timers.Timer timer;
    // Add references for click-outside detection
    private ElementReference notificationDropdownRef;
    // Use the actual component name
    private DotNetObjectReference<Navbar> objRef;
    // Add cancellation token source to handle async operations properly
    private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        IsAuthenticated = user?.Identity?.IsAuthenticated ?? false;
        if (IsAuthenticated)
        {
            UserName = user.Identity?.Name ?? "User";
            IsAdmin = user.IsInRole("Admin");
            IsStaff = user.IsInRole("Staff");

            try
            {
                currentUser = await UserManager.GetUserAsync(user);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading user: {ex.Message}");
            }
        }

        if (user.Identity?.IsAuthenticated == true)
        {
            userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                await LoadNotifications();

                // Set up timer to periodically check for new notifications
                timer = new System.Timers.Timer(30000); // Check every 30 seconds

                // Fix: Use weak event handler approach to prevent memory leaks
                timer.Elapsed += OnTimerElapsed;
                timer.AutoReset = true;
                timer.Enabled = true;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("addClickOutsideHandler", objRef, notificationDropdownRef);
        }
    }

    [JSInvokable]
    public void HandleClickOutside()
    {
        showNotifications = false;
        dropdownOpen = false;
        StateHasChanged();
    }

    // Separate method for timer callback to make it easier to unsubscribe
    private async void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        try
        {
            await InvokeAsync(async () =>
            {
                await CheckForNewNotifications();
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking notifications: {ex.Message}");
        }
    }

    private async Task LoadNotifications()
    {
        if (string.IsNullOrEmpty(userId))
            return;

        try
        {
            var token = _cancellationTokenSource.Token;

            notifications = await Context.Notifications
                .Where(n => n.UserId == userId)
                .OrderByDescending(n => n.CreatedAt)
                .ToListAsync(token);

            unreadCount = notifications.Count(n => !n.IsRead);

            await InvokeAsync(StateHasChanged);
        }
        catch (OperationCanceledException)
        {
            // Operation was canceled
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading notifications: {ex.Message}");
        }
    }

    private async Task CheckForNewNotifications()
    {
        if (string.IsNullOrEmpty(userId))
            return;

        try
        {
            var token = _cancellationTokenSource.Token;

            // Get latest notification date
            var latestDate = notifications.Any()
                ? notifications.Max(n => n.CreatedAt)
                : DateOnly.MinValue;

            // Query for newer notifications
            var newNotifications = await Context.Notifications
                .Where(n => n.UserId == userId && n.CreatedAt > latestDate)
                .ToListAsync(token);

            if (newNotifications.Any())
            {
                notifications.InsertRange(0, newNotifications);
                notifications = notifications.OrderByDescending(n => n.CreatedAt).ToList();
                unreadCount = notifications.Count(n => !n.IsRead);

                await InvokeAsync(StateHasChanged);
            }
        }
        catch (OperationCanceledException)
        {
            // Operation was canceled
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking for new notifications: {ex.Message}");
        }
    }

    private void ToggleNotifications()
    {
        // Close profile dropdown when opening notifications
        dropdownOpen = false;
        showNotifications = !showNotifications;
        StateHasChanged();
    }

    private async Task MarkAllAsRead()
    {
        if (string.IsNullOrEmpty(userId))
            return;

        try
        {
            var token = _cancellationTokenSource.Token;

            var unreadNotifications = await Context.Notifications
                .Where(n => n.UserId == userId && !n.IsRead)
                .ToListAsync(token);

            foreach (var notification in unreadNotifications)
            {
                notification.IsRead = true;
            }

            await Context.SaveChangesAsync(token);

            // Update local list
            foreach (var notification in notifications)
            {
                notification.IsRead = true;
            }

            unreadCount = 0;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking notifications as read: {ex.Message}");
        }
    }

    private async Task ViewNotification(NotificationModel notification)
    {
        try
        {
            if (!notification.IsRead)
            {
                notification.IsRead = true;
                Context.Notifications.Update(notification);
                await Context.SaveChangesAsync();
                unreadCount = Math.Max(0, unreadCount - 1);
                StateHasChanged();
            }

            if (!string.IsNullOrEmpty(notification.Link))
            {
                NavigationManager.NavigateTo(notification.Link);
                showNotifications = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error viewing notification: {ex.Message}");
        }
    }

    private void ViewAllNotifications()
    {
        NavigationManager.NavigateTo("/User/Notifications");
        showNotifications = false;
    }

    public void Dispose()
    {
        try
        {
            // Cancel any pending operations
            _cancellationTokenSource?.Cancel();

            // Clean up timer
            if (timer != null)
            {
                timer.Elapsed -= OnTimerElapsed;
                timer.Stop();
                timer.Dispose();
            }

            // Clean up JS interop
            if (objRef != null)
            {
                JSRuntime.InvokeVoidAsync("removeClickOutsideHandler", notificationDropdownRef);
                objRef.Dispose();
            }

            _cancellationTokenSource?.Dispose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during component disposal: {ex.Message}");
        }
    }

    private void ToggleDropdown()
    {
        // Close notifications when opening profile dropdown
        showNotifications = false;
        dropdownOpen = !dropdownOpen;
        StateHasChanged();
    }

    private void ToggleMobileMenu()
    {
        mobileMenuOpen = !mobileMenuOpen;
        StateHasChanged();
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("/logout", forceLoad: true);
        currentUser = null;

        StateHasChanged();
    }
}